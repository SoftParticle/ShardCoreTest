// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Particle.Framework.ShardCore.Contexts;

namespace ShardCoreTest.Data.Migrations.ShardInformationDb
{
    [DbContext(typeof(ShardInformationDbContext))]
    partial class ShardInformationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("Particle.Framework.ShardCore.Models.ShardInformation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ShardInformationId")
                        .UseIdentityColumn();

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ConnectionString");

                    b.Property<string>("DatabaseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DatabaseName");

                    b.Property<string>("DatabaseSchema")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DatabaseSchema");

                    b.Property<string>("DatabaseServerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DatabaseServerName");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit")
                        .HasColumnName("Enabled");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("InsertDate");

                    b.Property<bool>("ReadEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("ReadEnabled");

                    b.Property<string>("ShardFriendlyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ShardFriendlyName");

                    b.Property<string>("ShardIdPrefix")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ShardIdPrefix");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdateDate");

                    b.Property<bool>("UpdateEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("UpdateEnabled");

                    b.Property<bool>("WriteEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("WriteEnabled");

                    b.HasKey("Id")
                        .HasName("ShardInformationId");

                    b.HasIndex("Enabled")
                        .IsClustered(false);

                    b.HasIndex("ReadEnabled")
                        .IsClustered(false);

                    b.HasIndex("ShardIdPrefix")
                        .IsUnique()
                        .HasFilter("[ShardIdPrefix] IS NOT NULL")
                        .IsClustered(false);

                    b.HasIndex("UpdateDate")
                        .IsClustered(false);

                    b.HasIndex("WriteEnabled")
                        .IsClustered(false);

                    b.ToTable("ShardInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
